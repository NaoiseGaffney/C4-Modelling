!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/release/1-0/C4_Container.puml

Person(userDev, "Developer", "Continuous Feedback from System")
Person(userAlias, "User/Reader", "As a new user/reader I want to join the Book Repository to store details about my books so that I can share them with a wider audience.")
Person(adminAlias, "Admin", "As an admin or user/reader with the Admin Role I want to manage the users, genres, books, and statistics so that I can provide the best possible Book Repository experience for the users/readers.")

System_Boundary(book_repo_main_boundary, "Book Repository"){
    System_Boundary(user_management_system, "User Management"){
        Container(home_page, "Landing/Home Page", "home_page(), create admin account and genre collection - index.html")
        Container(delete_user, "Delete User", "delete_user(), D in User CRUD - edit_user_profile.html - modal")
    }
    System_Boundary(book_repo_system_boundary, "Book Repository"){
        System(member_page_system, "Member's Page and View Book"){
            Container(member_page, "Member's Page", "member_page(page=1), R in Book CRUD - members.html")
        }
        System(book_cud_system, "Book CUD"){
            Container(add_book, "Add Book", "add_book(), C in Book CRUD - add_book.html")
            Container(save_book, "Save Book", "save_book(), C in Book CRUD - no template")
            Container(edit_book, "Edit Book", "edit_book(book_id), C in Book CRUD - no template")
            Container(update_book, "Update Book", "update_book(book_id), U in Book CRUD - no template")
            Container(delete_book, "Delete Book", "delete_book(book_id), D in Book CRUD - modal")
        }
        System(book_search_system, "Book Search and Search Results"){
            Container(search_book, "Search Book", "search_book(), @ - search_book.html")
            Container(save_search, "Save Search", "save_search(), session['fields'] - no template")
            Container(search_results, "Search Results", "search_results(page=1), BaseQuerySets - search_results.html")
        }	
    }
    System_Boundary(admin_dashboard_system_boundary, "Admin Dashboard"){
        System(admin_dashboard_system, "Admin Dashboard"){
            Container(admin_dashboard, "Admin Dashboard", "admin_dashboard(page=1), Admin Dashboard for User Management and Statistics - admin_dashboard.html")
            Container(update_user, "Update User", "update_user(user_id), U in Admin User CRUD - admin_dashboard.html - modal")
            Container(admin_delete_user, "Admin Delete User", "admin_delete_user(user_id), D in Admin User CRUD - admin_dashboard.html - modal")
        }
        System(load_json_system, "Load JSON Files to Collections"){
            Container(load_genres, "Load Genres", "load_genres(), Load Book Genres from 'genre.json'")
            Container(load_books, "Load Sample Books", "Load Sample Books from 'book.json'")
        }
        System(view_genres_stats_system, "View Genres and Statistics"){
            Container(view_genres, "List Genres", "List the genres in the genre collection")
            Container(statistics, "Statistics", "View Book Repository Statistics")
        }
    }
    System_Boundary(shared_features_system, "Shared Features"){
        Container(application_log, "Application Log", "Rotating File Handler for local application logs, and Heroku Console otherwise")
        Container(flash_messages, "Flash Messages", "Continuous User/Reader feedback")
        Container(fdt, "Flash Debug Toolbar", "Debugging: Request Variables, Config, Templates, Route List, Profiler")
        Container(error_handlers, "Error Handlers", "Error Handlers for 400 CSRF Error (Bad Request), 404 Page Not Found, 405 Method Not Allowed, and 500 Internal Server Error")
        Container(runtime, "Runtime", "Development (Debug) or Production")
        Container(localFile, "Log File", "Development (Debug) or Production")
        Container(csrf, "CSRF", "CSRF Token for Flask-User and Book Repository (separate)")
        Container(session, "Session", "User Book Search Criteria and MongoEngineSession Data")
    }
    System_Boundary(external_systems, "External Systems"){
        Container(herokuConsole, "Heroku Console", "Development (Debug) or Production")
        Container(gmail, "GMail", "GMail 2FA", "Registration confirmation and password reset.")
        ContainerDb(mongodb, "MongoDB", "Flask_MongoEnginer -> MongoEngine -> PyMongo -> MongoDB")
    }
}

Rel_D(shared_features_system, gmail, "Uses", "SMTP")
Rel_U(flash_messages, userAlias, "Flash Messages", "Materialize Chip")
Rel_U(flash_messages, adminAlias, "Flash Messages", "Materialize Chip")
Rel_U(flash_messages, userDev, "Flash Messages", "Materialize Chip")
Rel_U(fdt, userDev, "Debug", "Detailed debug information about Flask")
Rel_U(application_log, localFile, "Application Log to File", "Debug to Critical")
Rel_U(localFile, userDev, "Event Analyis", "Debug to Critical")
Rel_U(application_log, herokuConsole, "Application Log to Heroku Console", "Debug to Critical")
Rel_U(herokuConsole, userDev, "Event Analysis", "Debug to Critical")
Rel_U(runtime, userDev, "Application Debug", "Debug level information from WSGI/Gunicorn")
Rel_U(error_handlers, userAlias, "Client and Server Errors", "Error Handlers for 400 CSRF Error (Bad Request), 404 Page Not Found, 405 Method Not Allowed, and 500 Internal Server Error")
Rel_U(error_handlers, adminAlias, "Client and Server Errors", "Error Handlers for 400 CSRF Error (Bad Request), 404 Page Not Found, 405 Method Not Allowed, and 500 Internal Server Error")
Rel_U(error_handlers, userDev, "Client and Server Errors", "Error Handlers for 400 CSRF Error (Bad Request), 404 Page Not Found, 405 Method Not Allowed, and 500 Internal Server Error")
Rel_U(csrf, userAlias, "CSRF", "Flask-User and Book Repository templates")
Rel_U(csrf, adminAlias, "CSRF", "Flask-User and Book Repository templates")
Rel_U(csrf, userDev, "CSRF", "Flask-User and Book Repository templates")
Rel_U(session, userAlias, "Session Cookies and MongoDB", "Session Cookies and Book Search Criteria")
Rel_U(session, adminAlias, "Session Cookies and MongoDB", "Session Cookies and Book Search Criteria")
Rel_U(session, userDev, "Session Cookies and MongoDB", "Session Cookies and Book Search Criteria")